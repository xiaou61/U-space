<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaou.community.mapper.CommunityCommentMapper">

    <resultMap id="BaseResultMap" type="com.xiaou.community.domain.CommunityComment">
        <id column="id" property="id"/>
        <result column="post_id" property="postId"/>
        <result column="parent_id" property="parentId"/>
        <result column="content" property="content"/>
        <result column="author_id" property="authorId"/>
        <result column="author_name" property="authorName"/>
        <result column="like_count" property="likeCount"/>
        <result column="reply_to_id" property="replyToId"/>
        <result column="reply_to_user_id" property="replyToUserId"/>
        <result column="reply_to_user_name" property="replyToUserName"/>
        <result column="reply_count" property="replyCount"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, post_id, parent_id, content, author_id, author_name, like_count, 
        reply_to_id, reply_to_user_id, reply_to_user_name, reply_count,
        status, create_time, update_time
    </sql>

    <insert id="insert" parameterType="com.xiaou.community.domain.CommunityComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO community_comment (post_id, parent_id, content, author_id, author_name, 
        like_count, reply_to_id, reply_to_user_id, reply_to_user_name, reply_count,
        status, create_time, update_time)
        VALUES (#{postId}, #{parentId}, #{content}, #{authorId}, #{authorName}, 
        #{likeCount}, #{replyToId}, #{replyToUserId}, #{replyToUserName}, #{replyCount},
        #{status}, NOW(), NOW())
    </insert>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE id = #{id}
    </select>

    <update id="updateById" parameterType="com.xiaou.community.domain.CommunityComment">
        UPDATE community_comment
        <set>
            <if test="content != null">content = #{content},</if>
            <if test="likeCount != null">like_count = #{likeCount},</if>
            <if test="status != null">status = #{status},</if>
            update_time = NOW()
        </set>
        WHERE id = #{id}
    </update>

    <select id="selectAdminCommentCount" parameterType="com.xiaou.community.dto.AdminCommentQueryRequest" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM community_comment
        <where>
            <if test="postId != null">
                AND post_id = #{postId}
            </if>
            <if test="authorName != null and authorName != ''">
                AND author_name LIKE CONCAT('%', #{authorName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="startTime != null and startTime != ''">
                AND create_time >= #{startTime}
            </if>
            <if test="endTime != null and endTime != ''">
                AND create_time &lt;= #{endTime}
            </if>
        </where>
    </select>

    <!-- 后台查询评论列表 -->
    <select id="selectAdminCommentList" resultMap="BaseResultMap">
        SELECT c.*, p.title as post_title
        FROM community_comment c
        LEFT JOIN community_post p ON c.post_id = p.id
        <where>
            <if test="request.status != null">
                AND c.status = #{request.status}
            </if>
            <if test="request.postId != null">
                AND c.post_id = #{request.postId}
            </if>
            <if test="request.authorName != null and request.authorName != ''">
                AND c.author_name LIKE CONCAT('%', #{request.authorName}, '%')
            </if>
            <if test="request.startTime != null and request.startTime != ''">
                AND c.create_time >= #{request.startTime}
            </if>
            <if test="request.endTime != null and request.endTime != ''">
                AND c.create_time &lt;= #{request.endTime}
            </if>
        </where>
        ORDER BY c.create_time DESC
    </select>

    <update id="deleteComment" parameterType="java.lang.Long">
        UPDATE community_comment 
        SET status = 2, update_time = NOW()
        WHERE id = #{id}
    </update>

    <select id="selectByPostId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE post_id = #{postId} AND status = 1
        <if test="sort == 'hot'">
            ORDER BY like_count DESC, create_time DESC
        </if>
        <if test="sort != 'hot'">
            ORDER BY create_time DESC
        </if>
    </select>

    <update id="updateLikeCount">
        UPDATE community_comment 
        SET like_count = like_count + #{count}, update_time = NOW()
        WHERE id = #{id}
    </update>

    <select id="selectByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE author_id = #{userId} AND status = 1
        ORDER BY create_time DESC
    </select>

    <!-- 查询帖子的评论总数 -->
    <select id="selectPostCommentCount" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM community_comment
        <where>
            AND post_id = #{postId}
            AND status = 1
        </where>
    </select>

    <!-- 分页查询帖子的评论列表 -->
    <select id="selectPostCommentList" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE post_id = #{postId} AND status = 1
        ORDER BY create_time ASC
    </select>

    <!-- 查询用户的评论总数 -->
    <select id="selectUserCommentCount" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM community_comment
        <where>
            AND author_id = #{userId}
            AND status = 1
            <if test="request.postId != null">
                AND post_id = #{request.postId}
            </if>
        </where>
    </select>

    <!-- 分页查询用户的评论列表 -->
    <select id="selectUserCommentList" resultMap="BaseResultMap">
        SELECT c.*, p.title as post_title
        FROM community_comment c
        LEFT JOIN community_post p ON c.post_id = p.id
        WHERE c.author_id = #{userId} AND c.status = 1
        ORDER BY c.create_time DESC
    </select>

    <!-- 查询评论的回复列表（最多N条） -->
    <select id="selectRepliesByCommentId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE reply_to_id = #{commentId}
        AND status = 1
        ORDER BY create_time ASC
        <if test="limit != null">
            LIMIT #{limit}
        </if>
    </select>

    <!-- 分页查询评论的所有回复 -->
    <select id="selectAllRepliesByCommentId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM community_comment
        WHERE reply_to_id = #{commentId}
        AND status = 1
        ORDER BY create_time ASC
    </select>

    <!-- 更新评论回复数 -->
    <update id="updateReplyCount">
        UPDATE community_comment
        SET reply_count = reply_count + #{count}
        WHERE id = #{id}
    </update>

</mapper> 