# 开发环境配置
server:
  # 服务器的HTTP端口，默认为9999
  port: 9999
  servlet:
    context-path: /api

spring:
  config:
    #这里里面放着一些私密的不能开源的配置
    import: "optional:application-sec.yml"
  profiles:
    active: dev
  application:
    name: Code-Nest
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  
  # Jackson JSON序列化配置
  jackson:
    # 时间格式配置
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    # LocalDateTime序列化配置
    serialization:
      write-dates-as-timestamps: false
    # 反序列化配置
    deserialization:
      fail-on-unknown-properties: false
  
  # Spring Security 全局配置
  security:
    user:
      # 完全禁用默认用户
      name: 
      password: 
      roles:

# JWT配置（保留兼容旧代码）
jwt:
  # JWT密钥（HS512算法要求至少64字节）
  secret: A0I5+vaOwhnQpPdtIxs0H+lKBa+tU6c8aP+Ppj5msSco0GSvcEo21JYJlAztsFPGiQ/jHRcXzS+asTbcj2LqFA==
  # 访问令牌过期时间（秒）7天 - 与前端Cookie保持一致
  expiration: 604800
  # 刷新令牌过期时间（秒）30天
  refresh-expiration: 2592000
  # 签发者
  issuer: code-nest

# Sa-Token 配置
sa-token:
  # Token 名称（同时也是 Cookie 名称）
  token-name: Authorization
  # Token 有效期（单位：秒）-1表示永不过期，7天
  timeout: 604800
  # Token 临时有效期（指定时间内无操作就视为Token过期）（单位：秒）
  # -1 表示不启用临时过期机制，即在 timeout 时间内一直有效
  # 如果设置为正数（如1800），则30分钟无操作会过期
  activity-timeout: -1
  # 是否允许同一账号并发登录（为true时允许一起登录，为false时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个Token（为true时所有登录共用一个Token，为false时每次登录新建一个Token）
  is-share: false
  # Token 风格（可选：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true
  # 是否从 Cookie 中读取 Token
  is-read-cookie: false
  # 是否从请求头中读取 Token
  is-read-header: true
  # Token 前缀（前端提交 Token 时需要加上的前缀）
  token-prefix: Bearer
  # 是否在初始化配置时打印版本字符画
  is-print: true

# MyBatis 配置
mybatis:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: 
    - classpath*:mapper/**/*.xml
    - classpath*:com/xiaou/*/mapper/*.xml
  # 实体类别名包路径（支持所有模块的domain包）
  type-aliases-package: com.xiaou.*.domain
  # 开启驼峰命名转换
  # 开启二级缓存
  # 延迟加载
  # 开启驼峰命名转换
  # 开启二级缓存
  # 延迟加载

# PageHelper 分页插件配置
pagehelper:
  helper-dialect: mysql
  # 分页参数合理化，当pageNum<=0时会查询第一页，pageNum>总页数时会查询最后一页
  reasonable: true
  # 支持通过Mapper接口参数来传递分页参数
  support-methods-arguments: true
  # 为了支持startPage(Object params)方法
  params: count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
  # 启用自动分页
  auto-runtime-dialect: true
  # 关闭banner
  banner: false

# 日志配置（使用logback-spring.xml配置文件）
logging:
  config: classpath:logback-spring.xml
  level:
    # 禁用 Spring Security 的默认日志
    org.springframework.boot.autoconfigure.security: OFF
    org.springframework.security: WARN
    com.xiaou: debug
    org.springframework.web: debug

# SpringDoc OpenAPI 3.0 配置
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  group-configs:
    - group: 'default'
      display-name: 'Code-Nest API'
      paths-to-match: '/**'

# ==================== Redis 持久化配置说明 ====================
# 为了确保重启后登录状态不丢失，必须启用 Redis 持久化！
# 
# 方法1：RDB持久化（推荐，性能好）
# 在 redis.conf 中添加或确认以下配置：
# save 900 1      # 900秒内至少1个key变化时保存
# save 300 10     # 300秒内至少10个key变化时保存
# save 60 10000   # 60秒内至少10000个key变化时保存
# dbfilename dump.rdb      # RDB文件名
# dir ./                    # RDB文件存储目录
#
# 方法2：AOF持久化（更安全，数据不易丢失）
# 在 redis.conf 中添加：
# appendonly yes           # 启用AOF
# appendfilename "appendonly.aof"
# appendfsync everysec     # 每秒同步一次（推荐）
# auto-aof-rewrite-percentage 100
# auto-aof-rewrite-min-size 64mb
#
# 推荐方案：同时启用 RDB + AOF（最安全）
# 重启 Redis 后，Sa-Token 的登录状态会从持久化文件中恢复
# 
# Windows 用户注意：
# 1. 找到 Redis 安装目录下的 redis.windows.conf
# 2. 使用文本编辑器打开并修改上述配置
# 3. 重启 Redis 服务使配置生效
# 
# Linux 用户注意：
# 1. 编辑 /etc/redis/redis.conf 或 /usr/local/etc/redis.conf
# 2. 修改上述配置后执行：sudo systemctl restart redis
#
# Docker 用户注意：
# 1. 在 docker-compose.yml 中挂载自定义 redis.conf
# 2. 挂载数据目录，确保持久化文件不会因容器重启而丢失

# ==================== 监控配置 ====================
xiaou:
  monitor:
    # 是否启用SQL监控 (默认true)
    enabled: true
    # 慢SQL阈值(毫秒) - 超过此阈值的SQL将被标记为慢SQL (默认1000ms)
    slow-sql-threshold: 1000
    # 是否启用调试日志 (默认false)
    debug-enabled: false
    
    # ========== SQL调用树追踪配置 ==========
    # 是否启用SQL调用树追踪 (默认true)
    tree-trace-enabled: true
    # 最大会话数量 - 内存中最多保存多少个调用树会话 (默认100)
    max-session-count: 100
    # 会话过期时间(分钟) - 超过此时间的会话将被自动清理 (默认60分钟)
    session-expire-minutes: 60
    
    # ========== 排除配置 ==========
    # 排除监控的mapper包路径
    exclude-mapper-packages:
      - com.xiaou.monitor.mapper
      - com.xiaou.system.mapper.SysLoginLogMapper
      - com.xiaou.system.mapper.SysOperationLogMapper
    
    # 排除监控的请求路径
    exclude-request-paths:
      - /monitor/
      - /auth/login-logs
      - /logs/
      - /api/sql-tree/
    
    # 排除监控的模块名称
    exclude-modules:
      - SqlMonitor
      - SqlTreeController
      - LogController
      - AuthController
    
    # 排除监控的方法名后缀
    exclude-method-suffixes:
      - selectPage
      - selectList
      - selectCount
      - selectById
      - selectByIds
    
    # 排除监控的mapper关键字
    exclude-mapper-keywords:
      - Admin
      - Log
      - Monitor
      - Permission
      - Role

# ==================== Coze工作流配置 ====================
coze:
  # API相关配置
  api:
    # Coze API基础URL
    base-url: https://api.coze.cn
    # 请求超时时间（毫秒）
    timeout: 30000
    # 重试次数
    retry-count: 3
    # 连接超时时间（毫秒）
    connect-timeout: 10000
    # 读取超时时间（毫秒）
    read-timeout: 60000
  
  # 认证相关配置
  auth:
    # API密钥 - 建议通过环境变量或application-sec.yml配置
    # 是否启用认证
    enabled: true
  
  # 缓存相关配置
  cache:
    # 是否启用缓存
    enabled: true
    # 缓存TTL（秒）
    ttl: 3600
    # 缓存Key前缀
    key-prefix: "coze:"