# 开发环境配置
server:
  # 服务器的HTTP端口，默认为9999
  port: 9999
  servlet:
    context-path: /api

spring:
  config:
    #这里里面放着一些私密的不能开源的配置
    import: "optional:application-sec.yml"
  profiles:
    active: dev
  application:
    name: Code-Nest
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  
  # Jackson JSON序列化配置
  jackson:
    # 时间格式配置
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    # LocalDateTime序列化配置
    serialization:
      write-dates-as-timestamps: false
    # 反序列化配置
    deserialization:
      fail-on-unknown-properties: false
  
  # Spring Security 全局配置
  security:
    user:
      # 完全禁用默认用户
      name: 
      password: 
      roles:

# JWT配置（保留兼容旧代码）
jwt:
  # JWT密钥（HS512算法要求至少64字节）
  secret: A0I5+vaOwhnQpPdtIxs0H+lKBa+tU6c8aP+Ppj5msSco0GSvcEo21JYJlAztsFPGiQ/jHRcXzS+asTbcj2LqFA==
  # 访问令牌过期时间（秒）7天 - 与前端Cookie保持一致
  expiration: 604800
  # 刷新令牌过期时间（秒）30天
  refresh-expiration: 2592000
  # 签发者
  issuer: code-nest

# Sa-Token 配置
sa-token:
  # Token 名称（同时也是 Cookie 名称）
  token-name: Authorization
  # Token 有效期（单位：秒）-1表示永不过期，7天
  timeout: 604800
  # Token 临时有效期（指定时间内无操作就视为Token过期）（单位：秒）
  # -1 表示不启用临时过期机制，即在 timeout 时间内一直有效
  # 如果设置为正数（如1800），则30分钟无操作会过期
  activity-timeout: -1
  # 是否允许同一账号并发登录（为true时允许一起登录，为false时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个Token（为true时所有登录共用一个Token，为false时每次登录新建一个Token）
  is-share: false
  # Token 风格（可选：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true
  # 是否从 Cookie 中读取 Token
  is-read-cookie: false
  # 是否从请求头中读取 Token
  is-read-header: true
  # Token 前缀（前端提交 Token 时需要加上的前缀）
  token-prefix: Bearer
  # 是否在初始化配置时打印版本字符画
  is-print: true

# MyBatis 配置
mybatis:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: 
    - classpath*:mapper/**/*.xml
    - classpath*:com/xiaou/*/mapper/*.xml
  # 实体类别名包路径（支持所有模块的domain包）
  type-aliases-package: com.xiaou.*.domain
  # 开启驼峰命名转换
  # 开启二级缓存
  # 延迟加载
  # 开启驼峰命名转换
  # 开启二级缓存
  # 延迟加载

# PageHelper 分页插件配置
pagehelper:
  helper-dialect: mysql
  # 分页参数合理化，当pageNum<=0时会查询第一页，pageNum>总页数时会查询最后一页
  reasonable: true
  # 支持通过Mapper接口参数来传递分页参数
  support-methods-arguments: true
  # 为了支持startPage(Object params)方法
  params: count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
  # 启用自动分页
  auto-runtime-dialect: true
  # 关闭banner
  banner: false

# 日志配置（使用logback-spring.xml配置文件）
logging:
  config: classpath:logback-spring.xml
  level:
    # 禁用 Spring Security 的默认日志
    org.springframework.boot.autoconfigure.security: OFF
    org.springframework.security: WARN
    com.xiaou: debug
    org.springframework.web: debug

# SpringDoc OpenAPI 3.0 配置
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  group-configs:
    - group: 'default'
      display-name: 'Code-Nest API'
      paths-to-match: '/**'

# ==================== SaToken Redis 配置说明 ====================
# SaToken 使用 sa-token-alone-redis 插件 + Jedis 实现 Redis 持久化
# 配置位置：application-dev.yml 中的 sa-token.alone-redis 节点
# 
# 重要说明：
# 1. 项目重启后，只要 Redis 服务不重启，Token 数据就不会丢失
# 2. Redis 本身是内存数据库，只有 Redis 服务重启时才需要考虑持久化（RDB/AOF）
# 3. 如果需要 Redis 重启后也保留数据，请在 redis.conf 中配置 RDB 或 AOF 持久化

# ==================== Prometheus 监控配置 ====================
# Spring Boot Actuator + Micrometer Prometheus 集成
# 提供生产级应用监控能力，包括：JVM、数据库连接池、HTTP请求、自定义业务指标等
# 
# 使用说明：
# 1. Prometheus 指标端点：http://localhost:9999/api/actuator/prometheus
# 2. 健康检查端点：http://localhost:9999/api/actuator/health
# 3. 所有指标端点：http://localhost:9999/api/actuator/metrics
# 
# Prometheus 配置示例（prometheus.yml）：
# scrape_configs:
#   - job_name: 'code-nest'
#     metrics_path: '/api/actuator/prometheus'
#     static_configs:
#       - targets: ['localhost:9999']
#
# Grafana Dashboard 推荐：
# - Spring Boot 2.1 Statistics (ID: 11378)
# - JVM (Micrometer) (ID: 4701)
# - Spring Boot Statistics (ID: 6756)
management:
  endpoints:
    web:
      # 端点基础路径，默认为 /actuator
      base-path: /actuator
      exposure:
        # 暴露的端点，* 表示全部，生产环境建议只暴露必要的端点
        include: health,info,metrics,prometheus
  endpoint:
    health:
      # 显示健康检查详细信息
      show-details: always
    prometheus:
      # 启用 Prometheus 端点
      enabled: true
  metrics:
    export:
      prometheus:
        # 启用 Prometheus 指标导出
        enabled: true
    tags:
      # 添加全局标签，用于在 Prometheus 中标识应用
      application: ${spring.application.name}
    distribution:
      # HTTP 请求延迟直方图配置
      percentiles-histogram:
        http.server.requests: true
      # 自定义百分位数统计
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      # SLA 边界配置（用于生成 _bucket 指标）
      sla:
        http.server.requests: 10ms, 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s

# ==================== Coze工作流配置 ====================
coze:
  # API相关配置
  api:
    # Coze API基础URL
    base-url: https://api.coze.cn
    # 请求超时时间（毫秒）
    timeout: 30000
    # 重试次数
    retry-count: 3
    # 连接超时时间（毫秒）
    connect-timeout: 10000
    # 读取超时时间（毫秒）
    read-timeout: 60000
  
  # 认证相关配置
  auth:
    # API密钥 - 建议通过环境变量或application-sec.yml配置
    # 是否启用认证
    enabled: true
  
  # 缓存相关配置
  cache:
    # 是否启用缓存
    enabled: true
    # 缓存TTL（秒）
    ttl: 3600
    # 缓存Key前缀
    key-prefix: "coze:"

# ==================== 社区模块配置 ====================
community:
  # 缓存配置
  cache:
    # 热门帖子缓存时间（秒），默认10分钟
    hot-posts-ttl: 600
    # 帖子详情缓存时间（秒），默认30分钟
    post-detail-ttl: 1800
    # 用户信息缓存时间（秒），默认1小时
    user-info-ttl: 3600
    # 标签列表缓存时间（秒），默认1天
    tags-ttl: 86400
  
  # 热门帖子配置
  hot:
    # 热门帖子时间范围（小时），默认72小时（3天）
    time-range: 72
    # 最低热度分数，默认30
    min-score: 30
    # 热门帖子数量限制，默认10
    limit: 10
    # 定时任务执行间隔（分钟），默认10分钟
    refresh-interval: 10
  
  # AI摘要配置
  ai:
    # 是否启用AI摘要功能
    enabled: true
    # Coze工作流ID
    coze-workflow-id: 7556892077167673394
    # 自动生成摘要的最小字数
    min-content-length: 500
    # 摘要缓存时间（秒），默认30天
    summary-cache-ttl: 2592000

