<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaou.common.mapper.NotificationMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.xiaou.common.domain.Notification">
        <id column="id" property="id" />
        <result column="title" property="title" />
        <result column="content" property="content" />
        <result column="type" property="type" />
        <result column="priority" property="priority" />
        <result column="sender_id" property="senderId" />
        <result column="receiver_id" property="receiverId" />
        <result column="source_module" property="sourceModule" />
        <result column="source_id" property="sourceId" />
        <result column="status" property="status" />
        <result column="read_time" property="readTime" />
        <result column="created_time" property="createdTime" />
        <result column="updated_time" property="updatedTime" />
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, title, content, type, priority, sender_id, receiver_id, source_module, source_id, status, read_time, created_time, updated_time
    </sql>

    <!-- 插入单个消息 -->
    <insert id="insert" parameterType="com.xiaou.common.domain.Notification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification (
            title, content, type, priority, sender_id, receiver_id, source_module, source_id, status
        ) VALUES (
            #{title}, #{content}, #{type}, #{priority}, #{senderId}, #{receiverId}, #{sourceModule}, #{sourceId}, #{status}
        )
    </insert>

    <!-- 批量插入消息 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO notification (
            title, content, type, priority, sender_id, receiver_id, source_module, source_id, status
        ) VALUES 
        <foreach collection="list" item="item" separator=",">
            (#{item.title}, #{item.content}, #{item.type}, #{item.priority}, 
             #{item.senderId}, #{item.receiverId}, #{item.sourceModule}, #{item.sourceId}, #{item.status})
        </foreach>
    </insert>

    <!-- 统计未读消息数量 -->
    <select id="countUnread" resultType="int">
        SELECT COUNT(*)
        FROM notification
        WHERE (receiver_id = #{userId} OR receiver_id IS NULL)
          AND status = 'UNREAD'
    </select>

    <!-- 分页查询用户消息 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM notification
        WHERE (receiver_id = #{userId} OR receiver_id IS NULL)
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <if test="type != null and type != ''">
            AND type = #{type}
        </if>
        ORDER BY created_time DESC
    </select>

    <!-- 根据ID查询消息 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM notification
        WHERE id = #{id}
    </select>

    <!-- 标记消息已读 -->
    <update id="markAsRead">
        UPDATE notification 
        SET status = 'READ', read_time = NOW(), updated_time = NOW()
        WHERE id = #{id} 
          AND (receiver_id = #{userId} OR receiver_id IS NULL)
          AND status = 'UNREAD'
    </update>

    <!-- 批量标记已读 -->
    <update id="batchMarkAsRead">
        UPDATE notification 
        SET status = 'READ', read_time = NOW(), updated_time = NOW()
        WHERE id IN 
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND (receiver_id = #{userId} OR receiver_id IS NULL)
        AND status = 'UNREAD'
    </update>

    <!-- 删除消息（软删除） -->
    <update id="deleteMessage">
        UPDATE notification 
        SET status = 'DELETED', updated_time = NOW()
        WHERE id = #{id} 
          AND receiver_id = #{userId}
    </update>

    <!-- 统计用户消息总数 -->
    <select id="countByUserId" resultType="int">
        SELECT COUNT(*)
        FROM notification
        WHERE (receiver_id = #{userId} OR receiver_id IS NULL)
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <if test="type != null and type != ''">
            AND type = #{type}
        </if>
    </select>

    <!-- 统计今日发送消息数量 -->
    <select id="countTodayMessages" resultType="Long">
        SELECT COUNT(*)
        FROM notification
        WHERE DATE(created_time) = CURDATE()
    </select>

    <!-- 统计本月发送消息数量 -->
    <select id="countMonthMessages" resultType="Long">
        SELECT COUNT(*)
        FROM notification
        WHERE YEAR(created_time) = YEAR(NOW()) 
          AND MONTH(created_time) = MONTH(NOW())
    </select>

    <!-- 统计全部未读消息数量 -->
    <select id="countAllUnreadMessages" resultType="Long">
        SELECT COUNT(*)
        FROM notification
        WHERE status = 'UNREAD'
    </select>

    <!-- 按类型统计消息数量 -->
    <select id="countByType" resultType="Long">
        SELECT COUNT(*)
        FROM notification
        WHERE type = #{type}
    </select>

    <!-- 按时间范围和类型统计消息数量 -->
    <select id="countByTimeRangeAndType" resultType="Long">
        SELECT COUNT(*)
        FROM notification
        WHERE 1=1
        <if test="startTime != null and startTime != ''">
            AND created_time &gt;= #{startTime}
        </if>
        <if test="endTime != null and endTime != ''">
            AND created_time &lt;= #{endTime}
        </if>
        <if test="type != null and type != ''">
            AND type = #{type}
        </if>
    </select>

    <!-- 统计用户真实未读消息数量（考虑阅读记录表） -->
    <select id="countUnreadWithReadRecord" resultType="int">
        SELECT COUNT(*)
        FROM notification n
        LEFT JOIN notification_user_read_record r ON n.id = r.notification_id AND r.user_id = #{userId}
        WHERE n.status != 'DELETED'
          AND (
            -- 个人消息：直接检查status
            (n.receiver_id = #{userId} AND n.status = 'UNREAD')
            OR
            -- 系统公告：检查用户是否有阅读记录
            (n.receiver_id IS NULL AND r.id IS NULL)
          )
    </select>

    <!-- 查询用户消息列表（考虑阅读记录表） -->
    <select id="selectByUserIdWithReadRecord" resultMap="BaseResultMap">
        SELECT n.id, n.title, n.content, n.type, n.priority, n.sender_id, n.receiver_id, n.source_module, n.source_id,
               CASE 
                 WHEN n.receiver_id IS NULL AND r.id IS NOT NULL THEN 'read'
                 WHEN n.receiver_id IS NULL AND r.id IS NULL THEN 'UNREAD'
                 ELSE n.status
               END as status,
               CASE 
                 WHEN n.receiver_id IS NULL AND r.id IS NOT NULL THEN r.read_time
                 ELSE n.read_time
               END as read_time,
               n.created_time, n.updated_time
        FROM notification n
        LEFT JOIN notification_user_read_record r ON n.id = r.notification_id AND r.user_id = #{userId}
        WHERE n.status != 'DELETED'
          AND (n.receiver_id = #{userId} OR n.receiver_id IS NULL)
        <if test="status != null and status != ''">
            AND (
              CASE 
                WHEN n.receiver_id IS NULL AND r.id IS NOT NULL THEN 'read'
                WHEN n.receiver_id IS NULL AND r.id IS NULL THEN 'UNREAD'
                ELSE n.status
              END = #{status}
            )
        </if>
        <if test="type != null and type != ''">
            AND n.type = #{type}
        </if>
        ORDER BY n.created_time DESC
    </select>

</mapper> 